{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Seika Engine Documentation About Seika Engine is an open source 2D/3D game engine. Use the left panel to navigate the documentation. Features Entity Component System. Scene System. Python scripting. Networking system for online multiplayer. Collision system. Keyboard, Mouse, and Joystick input management. Upcoming Stuff Fully integrated editor. Particle system. 3D Feature with Python API, model importing, and more... Tutorials and example projects.","title":"Home"},{"location":"#welcome-to-seika-engine-documentation","text":"","title":"Welcome to Seika Engine Documentation"},{"location":"#about","text":"Seika Engine is an open source 2D/3D game engine. Use the left panel to navigate the documentation.","title":"About"},{"location":"#features","text":"Entity Component System. Scene System. Python scripting. Networking system for online multiplayer. Collision system. Keyboard, Mouse, and Joystick input management.","title":"Features"},{"location":"#upcoming-stuff","text":"Fully integrated editor. Particle system. 3D Feature with Python API, model importing, and more... Tutorials and example projects.","title":"Upcoming Stuff"},{"location":"general/command_line_flags/","text":"Command Line Flags Log Level -l -log-level [SEIKA_ENGINE] [LOG_LEVEL_FLAG] [LOG_LEVEL] Sets the log level of the engine to either DEBUG , WARN , INFO , ERROR . Project File -p -project-file [SEIKA_ENGINE] [PROJECT_FILE_FLAG] [PROJECT_FILE_PATH] Overrides the default path project.scfg with the value that's passed in. Starting Directory -sd -starting-directory [SEIKA_ENGINE] [PROJECT_FILE_FLAG] [ENGINE_EXECUTABLE_DIRECTORY] Overrides the default directory of the engine on startup. Mostly to be used by the editor. Working Directory -d -working-directory [SEIKA_ENGINE] [PROJECT_FILE_FLAG] [PROJECT_WORKING_DIRECTORY] Overrides the default working path of the game. Directory must contain a project.scfg file. Local Assets -la -local-assets [SEIKA_ENGINE] [PROJECT_FILE_FLAG] [FLAG] Determines whether game assets are loaded from flat files or archive ( .pck file). Defaults to false .","title":"Command Line Flags"},{"location":"general/command_line_flags/#command-line-flags","text":"","title":"Command Line Flags"},{"location":"general/command_line_flags/#log-level","text":"-l -log-level [SEIKA_ENGINE] [LOG_LEVEL_FLAG] [LOG_LEVEL] Sets the log level of the engine to either DEBUG , WARN , INFO , ERROR .","title":"Log Level"},{"location":"general/command_line_flags/#project-file","text":"-p -project-file [SEIKA_ENGINE] [PROJECT_FILE_FLAG] [PROJECT_FILE_PATH] Overrides the default path project.scfg with the value that's passed in.","title":"Project File"},{"location":"general/command_line_flags/#starting-directory","text":"-sd -starting-directory [SEIKA_ENGINE] [PROJECT_FILE_FLAG] [ENGINE_EXECUTABLE_DIRECTORY] Overrides the default directory of the engine on startup. Mostly to be used by the editor.","title":"Starting Directory"},{"location":"general/command_line_flags/#working-directory","text":"-d -working-directory [SEIKA_ENGINE] [PROJECT_FILE_FLAG] [PROJECT_WORKING_DIRECTORY] Overrides the default working path of the game. Directory must contain a project.scfg file.","title":"Working Directory"},{"location":"general/command_line_flags/#local-assets","text":"-la -local-assets [SEIKA_ENGINE] [PROJECT_FILE_FLAG] [FLAG] Determines whether game assets are loaded from flat files or archive ( .pck file). Defaults to false .","title":"Local Assets"},{"location":"general/core_concepts/","text":"Core Concepts Node Nodes are the basic building block of a game in Seika Engine. There are many node types that inherit from the base Node class and more information about their API usage can be found here . Python scripts can be attached to Nodes to add to their functionality. Scene A scene is a collection of nodes. Must contain a root node and there can only be one root node per scene. Scenes can be instanced. When a scene is destroyed the root node as well as all it's children will also be removed. In Seika Engine all scenes are stored as json files. Here is an example of how a scene with just a root node is serialized to json. { \"name\": \"Main\", \"type\": \"Node\", \"tags\": [], \"external_scene_source\": \"\", \"components\": [], \"children\": [] } More examples of how nodes are serialized can be found here . Scene Tree The scene tree contains active scenes nodes. There are two types of active scenes. Main Scene The current main scene, there can only be one at a time. Singleton Scene Scenes that are made active when the game is initialized. They will stay active during the duration of the game unless queue_deletion() is called on them. Signal Signals can be used to apply the observer pattern to game logic. They are also used for notifying interested listeners about events for some of the systems within the engine (e.g. joystick disconnecting). Signals are defined within the base Node class. from seika.nodes import AnimatedSprite class Seika(AnimatedSprite): def _start(self) -> None: self.connect_signal(\"animation_finished\", self, \"_on_AnimatedSprite_animation_finished\") self.play(animation_name=\"swim\") def _on_AnimatedSprite_animation_finished(self, args : list) -> None: if self.animation.name == \"swim\": self.play(animation_name=\"idle\") Example to play an animation named 'idle' after the 'swim' animation is played.","title":"Core Concepts"},{"location":"general/core_concepts/#core-concepts","text":"","title":"Core Concepts"},{"location":"general/core_concepts/#node","text":"Nodes are the basic building block of a game in Seika Engine. There are many node types that inherit from the base Node class and more information about their API usage can be found here . Python scripts can be attached to Nodes to add to their functionality.","title":"Node"},{"location":"general/core_concepts/#scene","text":"A scene is a collection of nodes. Must contain a root node and there can only be one root node per scene. Scenes can be instanced. When a scene is destroyed the root node as well as all it's children will also be removed. In Seika Engine all scenes are stored as json files. Here is an example of how a scene with just a root node is serialized to json. { \"name\": \"Main\", \"type\": \"Node\", \"tags\": [], \"external_scene_source\": \"\", \"components\": [], \"children\": [] } More examples of how nodes are serialized can be found here .","title":"Scene"},{"location":"general/core_concepts/#scene-tree","text":"The scene tree contains active scenes nodes. There are two types of active scenes. Main Scene The current main scene, there can only be one at a time. Singleton Scene Scenes that are made active when the game is initialized. They will stay active during the duration of the game unless queue_deletion() is called on them.","title":"Scene Tree"},{"location":"general/core_concepts/#signal","text":"Signals can be used to apply the observer pattern to game logic. They are also used for notifying interested listeners about events for some of the systems within the engine (e.g. joystick disconnecting). Signals are defined within the base Node class. from seika.nodes import AnimatedSprite class Seika(AnimatedSprite): def _start(self) -> None: self.connect_signal(\"animation_finished\", self, \"_on_AnimatedSprite_animation_finished\") self.play(animation_name=\"swim\") def _on_AnimatedSprite_animation_finished(self, args : list) -> None: if self.animation.name == \"swim\": self.play(animation_name=\"idle\") Example to play an animation named 'idle' after the 'swim' animation is played.","title":"Signal"},{"location":"general/project_properties/","text":"Project Properties Project properties define how the game will be configured before running. An example of the file is found below: Format { \"game_title\": \"Fighting Game Proto\", \"initial_scene\": \"scenes/init.sscn\", \"base_resolution\": { \"width\": 800, \"height\": 600 }, \"colliders_visible\": true, \"target_fps\": 60, \"background_color\": { \"red\": 0.1, \"green\": 0.1, \"blue\": 0.1 }, \"assets\": [ { \"type\": \"texture\", \"file_path\": \"assets/fighters/puncher/puncher_basic_sheet.png\", \"wrap_s\": \"clamp_to_border\", \"wrap_t\": \"clamp_to_border\", \"filter_min\": \"nearest\", \"filter_max\": \"nearest\" }, { \"type\": \"font\", \"uid\": \"bruh\", \"file_path\": \"assets/fonts/bruh.ttf\", \"size\": 60 }, { \"type\": \"music\", \"file_path\": \"assets/audio/music/test_music.wav\" }, { \"type\": \"sound\", \"file_path\": \"assets/audio/sound/test_sound_effect.wav\" } ], \"input_actions\": [ { \"name\": \"quit\", \"values\": [\"esc\"] }, { \"name\": \"confirm\", \"values\": [\"return\"] } ] } Properties game_title Title of the game window. initial_scene First scene loaded for the game. base_resolution Base resolution of the game colliders_visible If true, will render a visible box for colliders. target_fps The FPS that the current game tries to achieve. background_color The background draw color of the renderer. assets Textures, fonts, music, and sound effect assets are defined here. input_actions Key bindings are defined here.","title":"Project Properties"},{"location":"general/project_properties/#project-properties","text":"Project properties define how the game will be configured before running. An example of the file is found below:","title":"Project Properties"},{"location":"general/project_properties/#format","text":"{ \"game_title\": \"Fighting Game Proto\", \"initial_scene\": \"scenes/init.sscn\", \"base_resolution\": { \"width\": 800, \"height\": 600 }, \"colliders_visible\": true, \"target_fps\": 60, \"background_color\": { \"red\": 0.1, \"green\": 0.1, \"blue\": 0.1 }, \"assets\": [ { \"type\": \"texture\", \"file_path\": \"assets/fighters/puncher/puncher_basic_sheet.png\", \"wrap_s\": \"clamp_to_border\", \"wrap_t\": \"clamp_to_border\", \"filter_min\": \"nearest\", \"filter_max\": \"nearest\" }, { \"type\": \"font\", \"uid\": \"bruh\", \"file_path\": \"assets/fonts/bruh.ttf\", \"size\": 60 }, { \"type\": \"music\", \"file_path\": \"assets/audio/music/test_music.wav\" }, { \"type\": \"sound\", \"file_path\": \"assets/audio/sound/test_sound_effect.wav\" } ], \"input_actions\": [ { \"name\": \"quit\", \"values\": [\"esc\"] }, { \"name\": \"confirm\", \"values\": [\"return\"] } ] }","title":"Format"},{"location":"general/project_properties/#properties","text":"game_title Title of the game window. initial_scene First scene loaded for the game. base_resolution Base resolution of the game colliders_visible If true, will render a visible box for colliders. target_fps The FPS that the current game tries to achieve. background_color The background draw color of the renderer. assets Textures, fonts, music, and sound effect assets are defined here. input_actions Key bindings are defined here.","title":"Properties"},{"location":"general/scene_file_reference/","text":"Scene File Reference About A reference to how scene nodes are serialized in json. The editor configures these files for the engine to read. Node Types Node { \"name\": \"Node Example\", \"type\": \"Node\", \"tags\": [], \"external_scene_source\": \"\", \"components\": [], \"children\": [] } Timer { \"name\": \"Timer Example\", \"type\": \"Timer\", \"tags\": [], \"external_scene_source\": \"\", \"components\": [ { \"timer\": { \"wait_time\": 1.0, \"loops\": true } } ], \"children\": [] } Node2D { \"name\": \"Node2D Example\", \"type\": \"Node2D\", \"tags\": [], \"external_scene_source\": \"\", \"components\": [ { \"transform2D\": { \"position\": { \"x\": 0.0, \"y\": 0.0 }, \"scale\": { \"x\": 1.0, \"y\": 1.0 }, \"rotation\": 0.0, \"z_index\": 0, \"z_index_relative_to_parent\": true, \"ignore_camera\": false } } ], \"children\": [] } Sprite { \"name\": \"Sprite Example\", \"type\": \"Sprite\", \"tags\": [], \"external_scene_source\": \"\", \"components\": [ { \"transform2D\": { \"position\": { \"x\": 0.0, \"y\": 0.0 }, \"scale\": { \"x\": 1.0, \"y\": 1.0 }, \"rotation\": 0.0, \"z_index\": 0, \"z_index_relative_to_parent\": true, \"ignore_camera\": false } }, { \"sprite\": { \"texture_path\": \"assets/images/seika_idle.png\", \"draw_source\": { \"x\": 0.0, \"y\": 0.0, \"width\": 48.0, \"height\": 48.0 }, \"flip_x\": false, \"flip_y\": false, \"modulate\": { \"red\": 1.0, \"blue\": 1.0, \"green\": 1.0, \"alpha\": 1.0 } } } ], \"children\": [] } AnimatedSprite { \"name\": \"AnimatedSprite Example\", \"type\": \"AnimatedSprite\", \"tags\": [], \"external_scene_source\": \"\", \"components\": [ { \"transform2D\": { \"position\": { \"x\": 0.0, \"y\": 0.0 }, \"scale\": { \"x\": 1.0, \"y\": 1.0 }, \"rotation\": 0.0, \"z_index\": 0, \"z_index_relative_to_parent\": true, \"ignore_camera\": false } }, { \"animated_sprite\": { \"current_animation\": \"idle\", \"is_playing\": false, \"flip_x\": false, \"flip_y\": false, \"modulate\": { \"red\": 1.0, \"green\": 1.0, \"blue\": 1.0, \"alpha\": 1.0 }, \"animations\": [ { \"name\": \"idle\", \"speed\": 100, \"frames\": [ { \"frame\": 0, \"texture_path\": \"assets/fighters/puncher/puncher_basic_sheet.png\", \"draw_source\": { \"x\": 0, \"y\": 35, \"width\": 30, \"height\": 35 } }, { \"frame\": 1, \"texture_path\": \"assets/fighters/puncher/puncher_basic_sheet.png\", \"draw_source\": { \"x\": 30, \"y\": 35, \"width\": 30, \"height\": 35 } }, { \"frame\": 2, \"texture_path\": \"assets/fighters/puncher/puncher_basic_sheet.png\", \"draw_source\": { \"x\": 60, \"y\": 35, \"width\": 30, \"height\": 35 } }, { \"frame\": 3, \"texture_path\": \"assets/fighters/puncher/puncher_basic_sheet.png\", \"draw_source\": { \"x\": 90, \"y\": 35, \"width\": 30, \"height\": 35 } }, { \"frame\": 4, \"texture_path\": \"assets/fighters/puncher/puncher_basic_sheet.png\", \"draw_source\": { \"x\": 120, \"y\": 35, \"width\": 30, \"height\": 35 } } ] }, { \"name\": \"walk\", \"speed\": 100, \"frames\": [ { \"frame\": 0, \"texture_path\": \"assets/fighters/puncher/puncher_basic_sheet.png\", \"draw_source\": { \"x\": 0, \"y\": 0, \"width\": 30, \"height\": 35 } }, { \"frame\": 1, \"texture_path\": \"assets/fighters/puncher/puncher_basic_sheet.png\", \"draw_source\": { \"x\": 30, \"y\": 0, \"width\": 30, \"height\": 35 } }, { \"frame\": 2, \"texture_path\": \"assets/fighters/puncher/puncher_basic_sheet.png\", \"draw_source\": { \"x\": 60, \"y\": 0, \"width\": 30, \"height\": 35 } }, { \"frame\": 3, \"texture_path\": \"assets/fighters/puncher/puncher_basic_sheet.png\", \"draw_source\": { \"x\": 90, \"y\": 0, \"width\": 30, \"height\": 35 } }, { \"frame\": 4, \"texture_path\": \"assets/fighters/puncher/puncher_basic_sheet.png\", \"draw_source\": { \"x\": 120, \"y\": 0, \"width\": 30, \"height\": 35 } }, { \"frame\": 5, \"texture_path\": \"assets/fighters/puncher/puncher_basic_sheet.png\", \"draw_source\": { \"x\": 150, \"y\": 0, \"width\": 30, \"height\": 35 } }, { \"frame\": 6, \"texture_path\": \"assets/fighters/puncher/puncher_basic_sheet.png\", \"draw_source\": { \"x\": 180, \"y\": 0, \"width\": 30, \"height\": 35 } }, { \"frame\": 7, \"texture_path\": \"assets/fighters/puncher/puncher_basic_sheet.png\", \"draw_source\": { \"x\": 210, \"y\": 0, \"width\": 30, \"height\": 35 } }, { \"frame\": 8, \"texture_path\": \"assets/fighters/puncher/puncher_basic_sheet.png\", \"draw_source\": { \"x\": 240, \"y\": 0, \"width\": 30, \"height\": 35 } }, { \"frame\": 9, \"texture_path\": \"assets/fighters/puncher/puncher_basic_sheet.png\", \"draw_source\": { \"x\": 270, \"y\": 0, \"width\": 30, \"height\": 35 } } ] } ] } } ], \"children\": [] } TextLabel { \"name\": \"TextLabel Example\", \"type\": \"TextLabel\", \"tags\": [], \"external_scene_source\": \"\", \"components\": [ { \"transform2D\": { \"position\": { \"x\": 0.0, \"y\": 0.0 }, \"scale\": { \"x\": 1.0, \"y\": 1.0 }, \"rotation\": 0.0, \"z_index\": 0, \"z_index_relative_to_parent\": true, \"ignore_camera\": false } }, { \"text_label\": { \"text\": \"Test text...\", \"font_uid\": \"verdana\", \"color\": { \"red\": 0.0, \"green\": 1.0, \"blue\": 1.0, \"alpha\": 1.0 } } } ], \"children\": [] } CollisionShape2D { \"name\": \"CollisionShape2D Example\", \"type\": \"CollisionShape2D\", \"tags\": [], \"external_scene_source\": \"\", \"components\": [ { \"transform2D\": { \"position\": { \"x\": 0.0, \"y\": 0.0 }, \"scale\": { \"x\": 1.0, \"y\": 1.0 }, \"rotation\": 0.0, \"z_index\": 0, \"z_index_relative_to_parent\": true, \"ignore_camera\": false } }, { \"collider\": { \"rectangle\": { \"x\": 0.0, \"y\": 0.0, \"width\": 16.0, \"height\": 16.0 }, \"color\": { \"red\": 0.37, \"green\": 0.80, \"blue\": 0.89, \"alpha\": 0.75 } } } ], \"children\": [] } Spatial { \"name\": \"Spatial Example\", \"type\": \"Spatial\", \"tags\": [], \"external_scene_source\": \"\", \"components\": [ { \"transform3D\": { \"position\": { \"x\": 0.0, \"y\": 0.0, \"z\": 0.0 }, \"scale\": { \"x\": 1.0, \"y\": 1.0, \"z\": 1.0 }, \"rotation\": 0.0, \"rotation_axis\": { \"x\": 0.0, \"y\": 0.0, \"z\": 0.0 } } } ], \"children\": [] } TextureCube { \"name\": \"TextureCube Example\", \"type\": \"TextureCube\", \"tags\": [], \"external_scene_source\": \"\", \"components\": [ { \"transform3D\": { \"position\": { \"x\": 0.0, \"y\": 0.0, \"z\": 0.0 }, \"scale\": { \"x\": 1.0, \"y\": 1.0, \"z\": 1.0 }, \"rotation\": 0.0, \"rotation_axis\": { \"x\": 0.0, \"y\": 0.0, \"z\": 0.0 } } }, { \"texture_cube\": {} }, { \"material\": { \"ambient\": { \"x\": 1.0, \"y\": 0.5, \"z\": 0.31 }, \"diffuse\": { \"x\": 1.0, \"y\": 0.5, \"z\": 0.31 }, \"specular\": { \"x\": 0.5, \"y\": 0.5, \"z\": 0.5 }, \"shininess\": 32.0, \"diffuse_map_texture_path\": \"assets/container.png\", \"specular_map_texture_path\": \"assets/container_specular.png\" } } ], \"children\": [] } DirectionalLight { \"name\": \"DirectionalLight Example\", \"type\": \"DirectionalLight\", \"tags\": [], \"external_scene_source\": \"\", \"components\": [ { \"transform3D\": { \"position\": { \"x\": 0.0, \"y\": 0.0, \"z\": 0.0 }, \"scale\": { \"x\": 1.0, \"y\": 1.0, \"z\": 1.0 }, \"rotation\": 0.0, \"rotation_axis\": { \"x\": 0.0, \"y\": 0.0, \"z\": 0.0 } } }, { \"directional_light\": { \"direction\": { \"x\": -0.2, \"y\": -1.0, \"z\": -0.3 } } }, { \"material\": { \"ambient\": { \"x\": 0.05, \"y\": 0.05, \"z\": 0.05 }, \"diffuse\": { \"x\": 0.4, \"y\": 0.4, \"z\": 0.4 }, \"specular\": { \"x\": 0.5, \"y\": 0.5, \"z\": 0.5 }, \"shininess\": 0.0, \"diffuse_map_texture_path\": \"\", \"specular_map_texture_path\": \"\" } } ], \"children\": [] } PointLight { \"name\": \"PointLight Example\", \"type\": \"PointLight\", \"tags\": [], \"external_scene_source\": \"\", \"components\": [ { \"transform3D\": { \"position\": { \"x\": 0.0, \"y\": 0.0, \"z\": 0.0 }, \"scale\": { \"x\": 1.0, \"y\": 1.0, \"z\": 1.0 }, \"rotation\": 0.0, \"rotation_axis\": { \"x\": 0.0, \"y\": 0.0, \"z\": 0.0 } } }, { \"point_light\": { \"linear\": 0.09, \"quadratic\": 0.032, \"constant\": 1.0 } }, { \"material\": { \"ambient\": { \"x\": 0.05, \"y\": 0.05, \"z\": 0.05 }, \"diffuse\": { \"x\": 0.8, \"y\": 0.8, \"z\": 0.8 }, \"specular\": { \"x\": 1.0, \"y\": 1.0, \"z\": 1.0 }, \"shininess\": 0.0, \"diffuse_map_texture_path\": \"\", \"specular_map_texture_path\": \"\" } } ], \"children\": [] } SpotLight { \"name\": \"SpotLight Example\", \"type\": \"SpotLight\", \"tags\": [], \"external_scene_source\": \"\", \"components\": [ { \"transform3D\": { \"position\": { \"x\": 0.0, \"y\": 0.0, \"z\": 0.0 }, \"scale\": { \"x\": 1.0, \"y\": 1.0, \"z\": 1.0 }, \"rotation\": 0.0, \"rotation_axis\": { \"x\": 0.0, \"y\": 0.0, \"z\": 0.0 } } }, { \"spot_light\": { \"direction\": { \"x\": 0.0, \"y\": 0.0, \"z\": 0.0 }, \"is_attached_to_camera\": true, \"linear\": 0.09, \"quadratic\": 0.032, \"constant\": 1.0, \"cutoff\": 12.5, \"outer_cutoff\": 15.0 } }, { \"material\": { \"ambient\": { \"x\": 0.0, \"y\": 0.0, \"z\": 0.0 }, \"diffuse\": { \"x\": 1.0, \"y\": 1.0, \"z\": 1.0 }, \"specular\": { \"x\": 1.0, \"y\": 1.0, \"z\": 1.0 }, \"shininess\": 0.0, \"diffuse_map_texture_path\": \"\", \"specular_map_texture_path\": \"\" } } ], \"children\": [] } Misc Scriptable A scriptable component can be attached to any NodeType. { \"name\": \"Scriptable Example\", \"type\": \"Node\", \"tags\": [], \"external_scene_source\": \"\", \"components\": [ { \"scriptable_class\": { \"class_path\": \"src.main\", \"class_name\": \"Main\" } } ], \"children\": [] } Children All nodes can have nested children. { \"name\": \"Parent Example\", \"type\": \"Node\", \"tags\": [], \"external_scene_source\": \"\", \"components\": [], \"children\": [ { \"name\": \"Child Example\", \"type\": \"Node\", \"tags\": [], \"external_scene_source\": \"\", \"components\": [], \"children\": [] } ] }","title":"Scene File Reference"},{"location":"general/scene_file_reference/#scene-file-reference","text":"","title":"Scene File Reference"},{"location":"general/scene_file_reference/#about","text":"A reference to how scene nodes are serialized in json. The editor configures these files for the engine to read.","title":"About"},{"location":"general/scene_file_reference/#node-types","text":"","title":"Node Types"},{"location":"general/scene_file_reference/#node","text":"{ \"name\": \"Node Example\", \"type\": \"Node\", \"tags\": [], \"external_scene_source\": \"\", \"components\": [], \"children\": [] }","title":"Node"},{"location":"general/scene_file_reference/#timer","text":"{ \"name\": \"Timer Example\", \"type\": \"Timer\", \"tags\": [], \"external_scene_source\": \"\", \"components\": [ { \"timer\": { \"wait_time\": 1.0, \"loops\": true } } ], \"children\": [] }","title":"Timer"},{"location":"general/scene_file_reference/#node2d","text":"{ \"name\": \"Node2D Example\", \"type\": \"Node2D\", \"tags\": [], \"external_scene_source\": \"\", \"components\": [ { \"transform2D\": { \"position\": { \"x\": 0.0, \"y\": 0.0 }, \"scale\": { \"x\": 1.0, \"y\": 1.0 }, \"rotation\": 0.0, \"z_index\": 0, \"z_index_relative_to_parent\": true, \"ignore_camera\": false } } ], \"children\": [] }","title":"Node2D"},{"location":"general/scene_file_reference/#sprite","text":"{ \"name\": \"Sprite Example\", \"type\": \"Sprite\", \"tags\": [], \"external_scene_source\": \"\", \"components\": [ { \"transform2D\": { \"position\": { \"x\": 0.0, \"y\": 0.0 }, \"scale\": { \"x\": 1.0, \"y\": 1.0 }, \"rotation\": 0.0, \"z_index\": 0, \"z_index_relative_to_parent\": true, \"ignore_camera\": false } }, { \"sprite\": { \"texture_path\": \"assets/images/seika_idle.png\", \"draw_source\": { \"x\": 0.0, \"y\": 0.0, \"width\": 48.0, \"height\": 48.0 }, \"flip_x\": false, \"flip_y\": false, \"modulate\": { \"red\": 1.0, \"blue\": 1.0, \"green\": 1.0, \"alpha\": 1.0 } } } ], \"children\": [] }","title":"Sprite"},{"location":"general/scene_file_reference/#animatedsprite","text":"{ \"name\": \"AnimatedSprite Example\", \"type\": \"AnimatedSprite\", \"tags\": [], \"external_scene_source\": \"\", \"components\": [ { \"transform2D\": { \"position\": { \"x\": 0.0, \"y\": 0.0 }, \"scale\": { \"x\": 1.0, \"y\": 1.0 }, \"rotation\": 0.0, \"z_index\": 0, \"z_index_relative_to_parent\": true, \"ignore_camera\": false } }, { \"animated_sprite\": { \"current_animation\": \"idle\", \"is_playing\": false, \"flip_x\": false, \"flip_y\": false, \"modulate\": { \"red\": 1.0, \"green\": 1.0, \"blue\": 1.0, \"alpha\": 1.0 }, \"animations\": [ { \"name\": \"idle\", \"speed\": 100, \"frames\": [ { \"frame\": 0, \"texture_path\": \"assets/fighters/puncher/puncher_basic_sheet.png\", \"draw_source\": { \"x\": 0, \"y\": 35, \"width\": 30, \"height\": 35 } }, { \"frame\": 1, \"texture_path\": \"assets/fighters/puncher/puncher_basic_sheet.png\", \"draw_source\": { \"x\": 30, \"y\": 35, \"width\": 30, \"height\": 35 } }, { \"frame\": 2, \"texture_path\": \"assets/fighters/puncher/puncher_basic_sheet.png\", \"draw_source\": { \"x\": 60, \"y\": 35, \"width\": 30, \"height\": 35 } }, { \"frame\": 3, \"texture_path\": \"assets/fighters/puncher/puncher_basic_sheet.png\", \"draw_source\": { \"x\": 90, \"y\": 35, \"width\": 30, \"height\": 35 } }, { \"frame\": 4, \"texture_path\": \"assets/fighters/puncher/puncher_basic_sheet.png\", \"draw_source\": { \"x\": 120, \"y\": 35, \"width\": 30, \"height\": 35 } } ] }, { \"name\": \"walk\", \"speed\": 100, \"frames\": [ { \"frame\": 0, \"texture_path\": \"assets/fighters/puncher/puncher_basic_sheet.png\", \"draw_source\": { \"x\": 0, \"y\": 0, \"width\": 30, \"height\": 35 } }, { \"frame\": 1, \"texture_path\": \"assets/fighters/puncher/puncher_basic_sheet.png\", \"draw_source\": { \"x\": 30, \"y\": 0, \"width\": 30, \"height\": 35 } }, { \"frame\": 2, \"texture_path\": \"assets/fighters/puncher/puncher_basic_sheet.png\", \"draw_source\": { \"x\": 60, \"y\": 0, \"width\": 30, \"height\": 35 } }, { \"frame\": 3, \"texture_path\": \"assets/fighters/puncher/puncher_basic_sheet.png\", \"draw_source\": { \"x\": 90, \"y\": 0, \"width\": 30, \"height\": 35 } }, { \"frame\": 4, \"texture_path\": \"assets/fighters/puncher/puncher_basic_sheet.png\", \"draw_source\": { \"x\": 120, \"y\": 0, \"width\": 30, \"height\": 35 } }, { \"frame\": 5, \"texture_path\": \"assets/fighters/puncher/puncher_basic_sheet.png\", \"draw_source\": { \"x\": 150, \"y\": 0, \"width\": 30, \"height\": 35 } }, { \"frame\": 6, \"texture_path\": \"assets/fighters/puncher/puncher_basic_sheet.png\", \"draw_source\": { \"x\": 180, \"y\": 0, \"width\": 30, \"height\": 35 } }, { \"frame\": 7, \"texture_path\": \"assets/fighters/puncher/puncher_basic_sheet.png\", \"draw_source\": { \"x\": 210, \"y\": 0, \"width\": 30, \"height\": 35 } }, { \"frame\": 8, \"texture_path\": \"assets/fighters/puncher/puncher_basic_sheet.png\", \"draw_source\": { \"x\": 240, \"y\": 0, \"width\": 30, \"height\": 35 } }, { \"frame\": 9, \"texture_path\": \"assets/fighters/puncher/puncher_basic_sheet.png\", \"draw_source\": { \"x\": 270, \"y\": 0, \"width\": 30, \"height\": 35 } } ] } ] } } ], \"children\": [] }","title":"AnimatedSprite"},{"location":"general/scene_file_reference/#textlabel","text":"{ \"name\": \"TextLabel Example\", \"type\": \"TextLabel\", \"tags\": [], \"external_scene_source\": \"\", \"components\": [ { \"transform2D\": { \"position\": { \"x\": 0.0, \"y\": 0.0 }, \"scale\": { \"x\": 1.0, \"y\": 1.0 }, \"rotation\": 0.0, \"z_index\": 0, \"z_index_relative_to_parent\": true, \"ignore_camera\": false } }, { \"text_label\": { \"text\": \"Test text...\", \"font_uid\": \"verdana\", \"color\": { \"red\": 0.0, \"green\": 1.0, \"blue\": 1.0, \"alpha\": 1.0 } } } ], \"children\": [] }","title":"TextLabel"},{"location":"general/scene_file_reference/#collisionshape2d","text":"{ \"name\": \"CollisionShape2D Example\", \"type\": \"CollisionShape2D\", \"tags\": [], \"external_scene_source\": \"\", \"components\": [ { \"transform2D\": { \"position\": { \"x\": 0.0, \"y\": 0.0 }, \"scale\": { \"x\": 1.0, \"y\": 1.0 }, \"rotation\": 0.0, \"z_index\": 0, \"z_index_relative_to_parent\": true, \"ignore_camera\": false } }, { \"collider\": { \"rectangle\": { \"x\": 0.0, \"y\": 0.0, \"width\": 16.0, \"height\": 16.0 }, \"color\": { \"red\": 0.37, \"green\": 0.80, \"blue\": 0.89, \"alpha\": 0.75 } } } ], \"children\": [] }","title":"CollisionShape2D"},{"location":"general/scene_file_reference/#spatial","text":"{ \"name\": \"Spatial Example\", \"type\": \"Spatial\", \"tags\": [], \"external_scene_source\": \"\", \"components\": [ { \"transform3D\": { \"position\": { \"x\": 0.0, \"y\": 0.0, \"z\": 0.0 }, \"scale\": { \"x\": 1.0, \"y\": 1.0, \"z\": 1.0 }, \"rotation\": 0.0, \"rotation_axis\": { \"x\": 0.0, \"y\": 0.0, \"z\": 0.0 } } } ], \"children\": [] }","title":"Spatial"},{"location":"general/scene_file_reference/#texturecube","text":"{ \"name\": \"TextureCube Example\", \"type\": \"TextureCube\", \"tags\": [], \"external_scene_source\": \"\", \"components\": [ { \"transform3D\": { \"position\": { \"x\": 0.0, \"y\": 0.0, \"z\": 0.0 }, \"scale\": { \"x\": 1.0, \"y\": 1.0, \"z\": 1.0 }, \"rotation\": 0.0, \"rotation_axis\": { \"x\": 0.0, \"y\": 0.0, \"z\": 0.0 } } }, { \"texture_cube\": {} }, { \"material\": { \"ambient\": { \"x\": 1.0, \"y\": 0.5, \"z\": 0.31 }, \"diffuse\": { \"x\": 1.0, \"y\": 0.5, \"z\": 0.31 }, \"specular\": { \"x\": 0.5, \"y\": 0.5, \"z\": 0.5 }, \"shininess\": 32.0, \"diffuse_map_texture_path\": \"assets/container.png\", \"specular_map_texture_path\": \"assets/container_specular.png\" } } ], \"children\": [] }","title":"TextureCube"},{"location":"general/scene_file_reference/#directionallight","text":"{ \"name\": \"DirectionalLight Example\", \"type\": \"DirectionalLight\", \"tags\": [], \"external_scene_source\": \"\", \"components\": [ { \"transform3D\": { \"position\": { \"x\": 0.0, \"y\": 0.0, \"z\": 0.0 }, \"scale\": { \"x\": 1.0, \"y\": 1.0, \"z\": 1.0 }, \"rotation\": 0.0, \"rotation_axis\": { \"x\": 0.0, \"y\": 0.0, \"z\": 0.0 } } }, { \"directional_light\": { \"direction\": { \"x\": -0.2, \"y\": -1.0, \"z\": -0.3 } } }, { \"material\": { \"ambient\": { \"x\": 0.05, \"y\": 0.05, \"z\": 0.05 }, \"diffuse\": { \"x\": 0.4, \"y\": 0.4, \"z\": 0.4 }, \"specular\": { \"x\": 0.5, \"y\": 0.5, \"z\": 0.5 }, \"shininess\": 0.0, \"diffuse_map_texture_path\": \"\", \"specular_map_texture_path\": \"\" } } ], \"children\": [] }","title":"DirectionalLight"},{"location":"general/scene_file_reference/#pointlight","text":"{ \"name\": \"PointLight Example\", \"type\": \"PointLight\", \"tags\": [], \"external_scene_source\": \"\", \"components\": [ { \"transform3D\": { \"position\": { \"x\": 0.0, \"y\": 0.0, \"z\": 0.0 }, \"scale\": { \"x\": 1.0, \"y\": 1.0, \"z\": 1.0 }, \"rotation\": 0.0, \"rotation_axis\": { \"x\": 0.0, \"y\": 0.0, \"z\": 0.0 } } }, { \"point_light\": { \"linear\": 0.09, \"quadratic\": 0.032, \"constant\": 1.0 } }, { \"material\": { \"ambient\": { \"x\": 0.05, \"y\": 0.05, \"z\": 0.05 }, \"diffuse\": { \"x\": 0.8, \"y\": 0.8, \"z\": 0.8 }, \"specular\": { \"x\": 1.0, \"y\": 1.0, \"z\": 1.0 }, \"shininess\": 0.0, \"diffuse_map_texture_path\": \"\", \"specular_map_texture_path\": \"\" } } ], \"children\": [] }","title":"PointLight"},{"location":"general/scene_file_reference/#spotlight","text":"{ \"name\": \"SpotLight Example\", \"type\": \"SpotLight\", \"tags\": [], \"external_scene_source\": \"\", \"components\": [ { \"transform3D\": { \"position\": { \"x\": 0.0, \"y\": 0.0, \"z\": 0.0 }, \"scale\": { \"x\": 1.0, \"y\": 1.0, \"z\": 1.0 }, \"rotation\": 0.0, \"rotation_axis\": { \"x\": 0.0, \"y\": 0.0, \"z\": 0.0 } } }, { \"spot_light\": { \"direction\": { \"x\": 0.0, \"y\": 0.0, \"z\": 0.0 }, \"is_attached_to_camera\": true, \"linear\": 0.09, \"quadratic\": 0.032, \"constant\": 1.0, \"cutoff\": 12.5, \"outer_cutoff\": 15.0 } }, { \"material\": { \"ambient\": { \"x\": 0.0, \"y\": 0.0, \"z\": 0.0 }, \"diffuse\": { \"x\": 1.0, \"y\": 1.0, \"z\": 1.0 }, \"specular\": { \"x\": 1.0, \"y\": 1.0, \"z\": 1.0 }, \"shininess\": 0.0, \"diffuse_map_texture_path\": \"\", \"specular_map_texture_path\": \"\" } } ], \"children\": [] }","title":"SpotLight"},{"location":"general/scene_file_reference/#misc","text":"","title":"Misc"},{"location":"general/scene_file_reference/#scriptable","text":"A scriptable component can be attached to any NodeType. { \"name\": \"Scriptable Example\", \"type\": \"Node\", \"tags\": [], \"external_scene_source\": \"\", \"components\": [ { \"scriptable_class\": { \"class_path\": \"src.main\", \"class_name\": \"Main\" } } ], \"children\": [] }","title":"Scriptable"},{"location":"general/scene_file_reference/#children","text":"All nodes can have nested children. { \"name\": \"Parent Example\", \"type\": \"Node\", \"tags\": [], \"external_scene_source\": \"\", \"components\": [], \"children\": [ { \"name\": \"Child Example\", \"type\": \"Node\", \"tags\": [], \"external_scene_source\": \"\", \"components\": [], \"children\": [] } ] }","title":"Children"},{"location":"python_api/","text":"Python API Contains information about the Python scripting API used for Seika Engine. Node Math Color Camera Audio Input Engine Physics Scene Network Renderer Assets Data","title":"Index"},{"location":"python_api/#python-api","text":"Contains information about the Python scripting API used for Seika Engine. Node Math Color Camera Audio Input Engine Physics Scene Network Renderer Assets Data","title":"Python API"},{"location":"python_api/assets/","text":"seika.assets Texture Engine representation of a texture. All properties are read only. Properties file_path : str Texture's relative file path. wrap_s : str String representation of texture's GL_TEXTURE_WRAP_S . wrap_t : str String representation of texture's GL_TEXTURE_WRAP_T . filter_min : str String representation of texture's GL_TEXTURE_MIN_FILTER . filter_max : str String representation of texture's GL_TEXTURE_MAG_FILTER . width : int Returns texture's width. height : int Returns texture's height. Signals None. Methods @staticmethod get(file_path: str) -> seika.assets.Texture: Get texture from relative file path. get_pixel_color(position: seika.math.Vector2) -> seika.color.Color: Get pixel color from a texture at the location of the passed in position . Font Engine representation of a font. All properties are read only. Properties uid : str Unique id of font. file_path : str Relative file path of font. size : int Size of the font. Signals None. Methods create(uid: str, file_path: str, size: int) -> seika.assets.Font: Creates a new font. get(uid: str) -> seika.assets.Font: Returns an already existing font.","title":"Assets"},{"location":"python_api/assets/#seikaassets","text":"","title":"seika.assets"},{"location":"python_api/assets/#texture","text":"Engine representation of a texture. All properties are read only.","title":"Texture"},{"location":"python_api/assets/#properties","text":"file_path : str Texture's relative file path. wrap_s : str String representation of texture's GL_TEXTURE_WRAP_S . wrap_t : str String representation of texture's GL_TEXTURE_WRAP_T . filter_min : str String representation of texture's GL_TEXTURE_MIN_FILTER . filter_max : str String representation of texture's GL_TEXTURE_MAG_FILTER . width : int Returns texture's width. height : int Returns texture's height.","title":"Properties"},{"location":"python_api/assets/#signals","text":"None.","title":"Signals"},{"location":"python_api/assets/#methods","text":"@staticmethod get(file_path: str) -> seika.assets.Texture: Get texture from relative file path. get_pixel_color(position: seika.math.Vector2) -> seika.color.Color: Get pixel color from a texture at the location of the passed in position .","title":"Methods"},{"location":"python_api/assets/#font","text":"Engine representation of a font. All properties are read only.","title":"Font"},{"location":"python_api/assets/#properties_1","text":"uid : str Unique id of font. file_path : str Relative file path of font. size : int Size of the font.","title":"Properties"},{"location":"python_api/assets/#signals_1","text":"None.","title":"Signals"},{"location":"python_api/assets/#methods_1","text":"create(uid: str, file_path: str, size: int) -> seika.assets.Font: Creates a new font. get(uid: str) -> seika.assets.Font: Returns an already existing font.","title":"Methods"},{"location":"python_api/audio/","text":"seika.audio Audio Interface for music and sound effects. Music will continue to loop until stopped and sound is only played once. Will be deprecated in place of AudioStream Properties None. Signals None. Methods @staticmethod play_music(music_id: str, loops=True) -> None: Plays music, will loop is loops is set to True . @staticmethod stop_music() -> None: Stops currently playing music. @staticmethod set_music_volume(volume: int) -> None: Sets volume for music. @staticmethod play_sound(sound_id: str) -> None: Plays a sound. @staticmethod set_sounds_volume(volume: int) -> None: Sets volume for sounds. @staticmethod set_all_volume(volume: int) -> None: Sets volume for all audio. Audio Stream Interface for audio. Should be used instead of Audio but care must be taken to zero out the amplitude at the end of samples especially when looping. Properties uid: str Unique identifier for AudioStream. pitch: float The pitch for the AudioStream, initializes to 1.0 by default. gain: float The gain (volume) for the AudioStream, initializes to 1.0 by default. loops: bool Determines if the AudioStream will play the sample from the beginning when reaching the end. Defaults to False . is_playing: bool Returns whether the audio stream is playing or not. Signals None. Methods play() -> None: Plays the audio loaded into AudioStream . stop() -> None: Stops the audio loaded into AudioStream .","title":"Audio"},{"location":"python_api/audio/#seikaaudio","text":"","title":"seika.audio"},{"location":"python_api/audio/#audio","text":"Interface for music and sound effects. Music will continue to loop until stopped and sound is only played once. Will be deprecated in place of AudioStream","title":"Audio"},{"location":"python_api/audio/#properties","text":"None.","title":"Properties"},{"location":"python_api/audio/#signals","text":"None.","title":"Signals"},{"location":"python_api/audio/#methods","text":"@staticmethod play_music(music_id: str, loops=True) -> None: Plays music, will loop is loops is set to True . @staticmethod stop_music() -> None: Stops currently playing music. @staticmethod set_music_volume(volume: int) -> None: Sets volume for music. @staticmethod play_sound(sound_id: str) -> None: Plays a sound. @staticmethod set_sounds_volume(volume: int) -> None: Sets volume for sounds. @staticmethod set_all_volume(volume: int) -> None: Sets volume for all audio.","title":"Methods"},{"location":"python_api/audio/#audio-stream","text":"Interface for audio. Should be used instead of Audio but care must be taken to zero out the amplitude at the end of samples especially when looping.","title":"Audio Stream"},{"location":"python_api/audio/#properties_1","text":"uid: str Unique identifier for AudioStream. pitch: float The pitch for the AudioStream, initializes to 1.0 by default. gain: float The gain (volume) for the AudioStream, initializes to 1.0 by default. loops: bool Determines if the AudioStream will play the sample from the beginning when reaching the end. Defaults to False . is_playing: bool Returns whether the audio stream is playing or not.","title":"Properties"},{"location":"python_api/audio/#signals_1","text":"None.","title":"Signals"},{"location":"python_api/audio/#methods_1","text":"play() -> None: Plays the audio loaded into AudioStream . stop() -> None: Stops the audio loaded into AudioStream .","title":"Methods"},{"location":"python_api/camera/","text":"seika.camera Camera2D Engine representation of a 2D camera. Properties None. Signals None. Methods @staticmethod set_zoom(zoom: seika.math.Vector2) -> None: Sets the camera's zoom. @staticmethod get_zoom() -> seika.math.Vector2: Gets the camera's zoom. @staticmethod set_viewport_position(zoom: seika.math.Vector2) -> None: Sets the camera's viewport position. @staticmethod get_viewport_position() -> seika.math.Vector2: Gets the camera's viewport position. @staticmethod set_offset(zoom: seika.math.Vector2) -> None: Sets the camera's offset. @staticmethod get_offset() -> seika.math.Vector2: Gets the camera's offset. Camera3D Engine representation of a 3D camera. Properties None. Signals None. Methods @staticmethod move_left(speed: float) -> None: Move the camera left by a certain speed. @staticmethod move_right(speed: float) -> None: Move the camera right by a certain speed. @staticmethod move_up(speed: float) -> None: Move the camera up by a certain speed. @staticmethod move_down(speed: float) -> None: Move the camera down by a certain speed. @staticmethod add_yaw(speed: float) -> None: Adds yaw to the camera to rotate based on the passed in speed. @staticmethod add_pitch(speed: float) -> None: Adds pitch to the camera to rotate based on the passed in speed.","title":"Camera"},{"location":"python_api/camera/#seikacamera","text":"","title":"seika.camera"},{"location":"python_api/camera/#camera2d","text":"Engine representation of a 2D camera.","title":"Camera2D"},{"location":"python_api/camera/#properties","text":"None.","title":"Properties"},{"location":"python_api/camera/#signals","text":"None.","title":"Signals"},{"location":"python_api/camera/#methods","text":"@staticmethod set_zoom(zoom: seika.math.Vector2) -> None: Sets the camera's zoom. @staticmethod get_zoom() -> seika.math.Vector2: Gets the camera's zoom. @staticmethod set_viewport_position(zoom: seika.math.Vector2) -> None: Sets the camera's viewport position. @staticmethod get_viewport_position() -> seika.math.Vector2: Gets the camera's viewport position. @staticmethod set_offset(zoom: seika.math.Vector2) -> None: Sets the camera's offset. @staticmethod get_offset() -> seika.math.Vector2: Gets the camera's offset.","title":"Methods"},{"location":"python_api/camera/#camera3d","text":"Engine representation of a 3D camera.","title":"Camera3D"},{"location":"python_api/camera/#properties_1","text":"None.","title":"Properties"},{"location":"python_api/camera/#signals_1","text":"None.","title":"Signals"},{"location":"python_api/camera/#methods_1","text":"@staticmethod move_left(speed: float) -> None: Move the camera left by a certain speed. @staticmethod move_right(speed: float) -> None: Move the camera right by a certain speed. @staticmethod move_up(speed: float) -> None: Move the camera up by a certain speed. @staticmethod move_down(speed: float) -> None: Move the camera down by a certain speed. @staticmethod add_yaw(speed: float) -> None: Adds yaw to the camera to rotate based on the passed in speed. @staticmethod add_pitch(speed: float) -> None: Adds pitch to the camera to rotate based on the passed in speed.","title":"Methods"},{"location":"python_api/color/","text":"seika.color Color Engine representation of color. Properties r : float Red color. g : float Green color. b : float Blue color. a : float Alpha or transparency of the color. Methods Static functions that return specific values WHITE() -> Color(1.0, 1.0, 1.0, 1.0): BLACK() -> Color(0.0, 0.0, 0.0, 1.0): RED() -> Color(1.0, 0.0, 0.0, 1.0): GREEN() -> Color(0.0, 1.0, 0.0, 1.0): BLUE() -> Color(0.0, 0.0, 1.0, 1.0):","title":"Color"},{"location":"python_api/color/#seikacolor","text":"","title":"seika.color"},{"location":"python_api/color/#color","text":"Engine representation of color.","title":"Color"},{"location":"python_api/color/#properties","text":"r : float Red color. g : float Green color. b : float Blue color. a : float Alpha or transparency of the color.","title":"Properties"},{"location":"python_api/color/#methods","text":"Static functions that return specific values WHITE() -> Color(1.0, 1.0, 1.0, 1.0): BLACK() -> Color(0.0, 0.0, 0.0, 1.0): RED() -> Color(1.0, 0.0, 0.0, 1.0): GREEN() -> Color(0.0, 1.0, 0.0, 1.0): BLUE() -> Color(0.0, 0.0, 1.0, 1.0):","title":"Methods"},{"location":"python_api/data/","text":"seika.data ConfigTool A tool used to save and load game data. Game data will be saved/loaded from the user directory. On Windows the default root path is C:\\Users\\$CURRENT_USER\\AppData\\Roaming\\seika_engine\\$GAME_TITLE . Properties file_path : str File path of ConfigTool . data : dict Current data being stored within ConfigTool . Should be serializable to JSON. Signals None. Methods save_file(encryption_key: Optional[str] = None) -> bool: Save data into a file at file_path . If encryption_key is passed in, will encrypt the file. Will return True if save is successful. load_file(encryption_key: Optional[str] = None) -> bool: Loads data from a file at file_path . If encryption_key is passed in, will decrypt the file before loading. Will return True if loaded successfully. delete_file() -> bool: Deletes file at file_path . Will return True if successfully deleted. does_file_exist() -> bool: Return True if file exists. Example Usage Save Game from seika.node import Node2D from seika.data import ConfigTool class Main(Node2D): def _start(self) -> None: # Save File config_tool = ConfigTool(file_path=\"game.sav\", initial_data={\"level\": 1}) config_tool.save() # Save Encrypted File config_tool_secrets = ConfigTool(file_path=\"game_enc.sav\", initial_data={\"name\": \"Amaya\"}) config_tool_secrets.save(encrypted_key=\"secret_password\") Load Game from seika.node import Node2D from seika.data import ConfigTool class Main(Node2D): def _start(self) -> None: # Load File config_tool = ConfigTool(file_path=\"game.sav\") config_tool.load_file() print(f\"game.sav = {config_tool.data}\") # prints 'game.sav = {\"level\":1}' # Load Encrypted File config_tool_secrets = ConfigTool(file_path=\"game_enc.sav\") config_tool_secrets.load_file(encrypted_key=\"secret_password\") print(f\"game_enc.sav = {config_tool_secrets.data}\") # prints 'game_enc.sav = {\"name\":\"Amaya\"}'","title":"Data"},{"location":"python_api/data/#seikadata","text":"","title":"seika.data"},{"location":"python_api/data/#configtool","text":"A tool used to save and load game data. Game data will be saved/loaded from the user directory. On Windows the default root path is C:\\Users\\$CURRENT_USER\\AppData\\Roaming\\seika_engine\\$GAME_TITLE .","title":"ConfigTool"},{"location":"python_api/data/#properties","text":"file_path : str File path of ConfigTool . data : dict Current data being stored within ConfigTool . Should be serializable to JSON.","title":"Properties"},{"location":"python_api/data/#signals","text":"None.","title":"Signals"},{"location":"python_api/data/#methods","text":"save_file(encryption_key: Optional[str] = None) -> bool: Save data into a file at file_path . If encryption_key is passed in, will encrypt the file. Will return True if save is successful. load_file(encryption_key: Optional[str] = None) -> bool: Loads data from a file at file_path . If encryption_key is passed in, will decrypt the file before loading. Will return True if loaded successfully. delete_file() -> bool: Deletes file at file_path . Will return True if successfully deleted. does_file_exist() -> bool: Return True if file exists.","title":"Methods"},{"location":"python_api/data/#example-usage","text":"","title":"Example Usage"},{"location":"python_api/data/#save-game","text":"from seika.node import Node2D from seika.data import ConfigTool class Main(Node2D): def _start(self) -> None: # Save File config_tool = ConfigTool(file_path=\"game.sav\", initial_data={\"level\": 1}) config_tool.save() # Save Encrypted File config_tool_secrets = ConfigTool(file_path=\"game_enc.sav\", initial_data={\"name\": \"Amaya\"}) config_tool_secrets.save(encrypted_key=\"secret_password\")","title":"Save Game"},{"location":"python_api/data/#load-game","text":"from seika.node import Node2D from seika.data import ConfigTool class Main(Node2D): def _start(self) -> None: # Load File config_tool = ConfigTool(file_path=\"game.sav\") config_tool.load_file() print(f\"game.sav = {config_tool.data}\") # prints 'game.sav = {\"level\":1}' # Load Encrypted File config_tool_secrets = ConfigTool(file_path=\"game_enc.sav\") config_tool_secrets.load_file(encrypted_key=\"secret_password\") print(f\"game_enc.sav = {config_tool_secrets.data}\") # prints 'game_enc.sav = {\"name\":\"Amaya\"}'","title":"Load Game"},{"location":"python_api/engine/","text":"seika.engine Engine Interface for miscellaneous operations for the game engine. Properties None. Signals None. Methods @staticmethod exit(code=0) -> None: Exits the engine returning the value of code as the exit code. @staticmethod get_fps() -> float: Returns current FPS.","title":"Engine"},{"location":"python_api/engine/#seikaengine","text":"","title":"seika.engine"},{"location":"python_api/engine/#engine","text":"Interface for miscellaneous operations for the game engine.","title":"Engine"},{"location":"python_api/engine/#properties","text":"None.","title":"Properties"},{"location":"python_api/engine/#signals","text":"None.","title":"Signals"},{"location":"python_api/engine/#methods","text":"@staticmethod exit(code=0) -> None: Exits the engine returning the value of code as the exit code. @staticmethod get_fps() -> float: Returns current FPS.","title":"Methods"},{"location":"python_api/input/","text":"seika.input Input Class for handling input. Properties None. Signals None. Methods @staticmethod add_action(action_name: str, value: str) -> None: Adds an input action. Multiple input values can be added to the same action_name . For possible values check Mouse , Keyboard , and Joystick properties. @staticmethod remove_action(action_name: str) -> None: Completely removes action. @staticmethod is_action_pressed(action_name: str) -> bool: Returns true if an action input is currently being held down. @staticmethod is_action_just_pressed(action_name: str) -> bool: Returns true if an action input was just pressed. @staticmethod is_action_just_released(action_name: str) -> bool: Returns true if an action input was just released. Mouse Class interface for mouse inputs. Properties Mouse Action Values Mouse.LEFT_BUTTON = \"mb_left\" # Left Mouse Button Mouse.RIGHT_BUTTON = \"mb_right\" # Right Mouse Button Signals None. Methods @staticmethod get_position() -> seika.math.Vector2: Returns mouse position. Keyboard Class interface for keyboard inputs. Properties Keyboard Action Values Keyboard.NUM_0 = 0 # Zero Keyboard.NUM_1 = 1 # One Keyboard.NUM_2 = 2 # Two Keyboard.NUM_3 = 3 # Three Keyboard.NUM_4 = 4 # Four Keyboard.NUM_5 = 5 # Five Keyboard.NUM_6 = 6 # Six Keyboard.NUM_7 = 7 # Seven Keyboard.NUM_8 = 8 # Eight Keyboard.NUM_9 = 9 # Nine Keyboard.A = \"a\" Keyboard.B = \"b\" Keyboard.C = \"c\" Keyboard.D = \"d\" Keyboard.E = \"e\" Keyboard.F = \"f\" Keyboard.G = \"g\" Keyboard.H = \"h\" Keyboard.I = \"i\" Keyboard.J = \"j\" Keyboard.K = \"k\" Keyboard.L = \"l\" Keyboard.M = \"m\" Keyboard.N = \"n\" Keyboard.O = \"o\" Keyboard.P = \"p\" Keyboard.Q = \"q\" Keyboard.R = \"r\" Keyboard.S = \"s\" Keyboard.T = \"t\" Keyboard.U = \"u\" Keyboard.V = \"v\" Keyboard.W = \"w\" Keyboard.X = \"x\" Keyboard.Y = \"y\" Keyboard.Z = \"z\" Keyboard.UP = \"up\" # Up Arrow Key Keyboard.DOWN = \"down\" # Down Arrow Key Keyboard.LEFT = \"left\" # Left Arrow Key Keyboard.RIGHT = \"right\" # Right Arrow Key Keyboard.SPACE = \"space\" # Space Key Keyboard.ESC = \"esc\" # ESC Key Keyboard.RETURN = \"return\" # Enter Key Keyboard.F1 = \"f1\" Keyboard.F2 = \"f2\" Keyboard.F3 = \"f3\" Keyboard.F4 = \"f4\" Keyboard.F5 = \"f5\" Keyboard.F6 = \"f6\" Keyboard.F7 = \"f7\" Keyboard.F8 = \"f8\" Keyboard.F9 = \"f9\" Keyboard.F10 = \"f10\" Keyboard.F11 = \"f11\" Keyboard.F12 = \"f12\" Signals None. Methods None. Joystick Class interface for joystick inputs. Properties Joystick Action Values Joystick.A_BUTTON = \"joystick_button_a\" # XBOX A Joystick.B_BUTTON = \"joystick_button_b\" # XBOX B Joystick.X_BUTTON = \"joystick_button_x\" # XBOX X Joystick.Y_BUTTON = \"joystick_button_y\" # XBOX Y Joystick.KEYPAD_UP = \"joystick_keypad_up\" Joystick.KEYPAD_DOWN = \"joystick_keypad_down\" Joystick.KEYPAD_LEFT = \"joystick_keypad_left\" Joystick.KEYPAD_RIGHT = \"joystick_keypad_right\" Joystick.LEFT_ANALOG = \"joystick_left_analog\" Joystick.LEFT_ANALOG_LEFT = \"joystick_left_analog_left\" Joystick.LEFT_ANALOG_RIGHT = \"joystick_left_analog_right\" Joystick.LEFT_ANALOG_UP = \"joystick_left_analog_up\" Joystick.LEFT_ANALOG_DOWN = \"joystick_left_analog_down\" Joystick.RIGHT_ANALOG = \"joystick_right_analog\" Joystick.RIGHT_ANALOG_LEFT = \"joystick_right_analog_left\" Joystick.RIGHT_ANALOG_RIGHT = \"joystick_right_analog_right\" Joystick.RIGHT_ANALOG_UP = \"joystick_right_analog_up\" Joystick.RIGHT_ANALOG_DOWN = \"joystick_right_analog_down\" Joystick.START_BUTTON = \"joystick_button_start\" Joystick.BACK_BUTTON = \"joystick_button_back\" Joystick.SHOULDER_LEFT = \"joystick_left_shoulder\" Joystick.SHOULDER_RIGHT = \"joystick_right_shoulder\" Joystick.TRIGGER_LEFT = \"joystick_left_trigger\" Joystick.TRIGGER_RIGHT = \"joystick_right_trigger\" Signals None. Methods None.","title":"Input"},{"location":"python_api/input/#seikainput","text":"","title":"seika.input"},{"location":"python_api/input/#input","text":"Class for handling input.","title":"Input"},{"location":"python_api/input/#properties","text":"None.","title":"Properties"},{"location":"python_api/input/#signals","text":"None.","title":"Signals"},{"location":"python_api/input/#methods","text":"@staticmethod add_action(action_name: str, value: str) -> None: Adds an input action. Multiple input values can be added to the same action_name . For possible values check Mouse , Keyboard , and Joystick properties. @staticmethod remove_action(action_name: str) -> None: Completely removes action. @staticmethod is_action_pressed(action_name: str) -> bool: Returns true if an action input is currently being held down. @staticmethod is_action_just_pressed(action_name: str) -> bool: Returns true if an action input was just pressed. @staticmethod is_action_just_released(action_name: str) -> bool: Returns true if an action input was just released.","title":"Methods"},{"location":"python_api/input/#mouse","text":"Class interface for mouse inputs.","title":"Mouse"},{"location":"python_api/input/#properties_1","text":"Mouse Action Values Mouse.LEFT_BUTTON = \"mb_left\" # Left Mouse Button Mouse.RIGHT_BUTTON = \"mb_right\" # Right Mouse Button","title":"Properties"},{"location":"python_api/input/#signals_1","text":"None.","title":"Signals"},{"location":"python_api/input/#methods_1","text":"@staticmethod get_position() -> seika.math.Vector2: Returns mouse position.","title":"Methods"},{"location":"python_api/input/#keyboard","text":"Class interface for keyboard inputs.","title":"Keyboard"},{"location":"python_api/input/#properties_2","text":"Keyboard Action Values Keyboard.NUM_0 = 0 # Zero Keyboard.NUM_1 = 1 # One Keyboard.NUM_2 = 2 # Two Keyboard.NUM_3 = 3 # Three Keyboard.NUM_4 = 4 # Four Keyboard.NUM_5 = 5 # Five Keyboard.NUM_6 = 6 # Six Keyboard.NUM_7 = 7 # Seven Keyboard.NUM_8 = 8 # Eight Keyboard.NUM_9 = 9 # Nine Keyboard.A = \"a\" Keyboard.B = \"b\" Keyboard.C = \"c\" Keyboard.D = \"d\" Keyboard.E = \"e\" Keyboard.F = \"f\" Keyboard.G = \"g\" Keyboard.H = \"h\" Keyboard.I = \"i\" Keyboard.J = \"j\" Keyboard.K = \"k\" Keyboard.L = \"l\" Keyboard.M = \"m\" Keyboard.N = \"n\" Keyboard.O = \"o\" Keyboard.P = \"p\" Keyboard.Q = \"q\" Keyboard.R = \"r\" Keyboard.S = \"s\" Keyboard.T = \"t\" Keyboard.U = \"u\" Keyboard.V = \"v\" Keyboard.W = \"w\" Keyboard.X = \"x\" Keyboard.Y = \"y\" Keyboard.Z = \"z\" Keyboard.UP = \"up\" # Up Arrow Key Keyboard.DOWN = \"down\" # Down Arrow Key Keyboard.LEFT = \"left\" # Left Arrow Key Keyboard.RIGHT = \"right\" # Right Arrow Key Keyboard.SPACE = \"space\" # Space Key Keyboard.ESC = \"esc\" # ESC Key Keyboard.RETURN = \"return\" # Enter Key Keyboard.F1 = \"f1\" Keyboard.F2 = \"f2\" Keyboard.F3 = \"f3\" Keyboard.F4 = \"f4\" Keyboard.F5 = \"f5\" Keyboard.F6 = \"f6\" Keyboard.F7 = \"f7\" Keyboard.F8 = \"f8\" Keyboard.F9 = \"f9\" Keyboard.F10 = \"f10\" Keyboard.F11 = \"f11\" Keyboard.F12 = \"f12\"","title":"Properties"},{"location":"python_api/input/#signals_2","text":"None.","title":"Signals"},{"location":"python_api/input/#methods_2","text":"None.","title":"Methods"},{"location":"python_api/input/#joystick","text":"Class interface for joystick inputs.","title":"Joystick"},{"location":"python_api/input/#properties_3","text":"Joystick Action Values Joystick.A_BUTTON = \"joystick_button_a\" # XBOX A Joystick.B_BUTTON = \"joystick_button_b\" # XBOX B Joystick.X_BUTTON = \"joystick_button_x\" # XBOX X Joystick.Y_BUTTON = \"joystick_button_y\" # XBOX Y Joystick.KEYPAD_UP = \"joystick_keypad_up\" Joystick.KEYPAD_DOWN = \"joystick_keypad_down\" Joystick.KEYPAD_LEFT = \"joystick_keypad_left\" Joystick.KEYPAD_RIGHT = \"joystick_keypad_right\" Joystick.LEFT_ANALOG = \"joystick_left_analog\" Joystick.LEFT_ANALOG_LEFT = \"joystick_left_analog_left\" Joystick.LEFT_ANALOG_RIGHT = \"joystick_left_analog_right\" Joystick.LEFT_ANALOG_UP = \"joystick_left_analog_up\" Joystick.LEFT_ANALOG_DOWN = \"joystick_left_analog_down\" Joystick.RIGHT_ANALOG = \"joystick_right_analog\" Joystick.RIGHT_ANALOG_LEFT = \"joystick_right_analog_left\" Joystick.RIGHT_ANALOG_RIGHT = \"joystick_right_analog_right\" Joystick.RIGHT_ANALOG_UP = \"joystick_right_analog_up\" Joystick.RIGHT_ANALOG_DOWN = \"joystick_right_analog_down\" Joystick.START_BUTTON = \"joystick_button_start\" Joystick.BACK_BUTTON = \"joystick_button_back\" Joystick.SHOULDER_LEFT = \"joystick_left_shoulder\" Joystick.SHOULDER_RIGHT = \"joystick_right_shoulder\" Joystick.TRIGGER_LEFT = \"joystick_left_trigger\" Joystick.TRIGGER_RIGHT = \"joystick_right_trigger\"","title":"Properties"},{"location":"python_api/input/#signals_3","text":"None.","title":"Signals"},{"location":"python_api/input/#methods_3","text":"None.","title":"Methods"},{"location":"python_api/math/","text":"seika.math Math Generic math functions Properties None. Signals None. Methods lerp(source: float, destination: float, amount: float) -> float: Linearly interpolate between two values. Vector2 Engine representation of a two-dimensional vector. Properties x : float X coordinate. y : float Y coordinate. Signals None. Methods dot_product(value: seika.math.Vector2) -> float: Returns the dot product of two Vector2 items. lerp(source: seika.math.Vector2, destination: seika.math.Vector2, amount: float) -> seika.math.Vector2: Returns the linearly interpolated value of two points. Static functions that return specific values ZERO() -> Vector2(0.0, 0.0): LEFT() -> Vector2(-1.0, 0.0): RIGHT() -> Vector2(0.0, 1.0): UP() -> Vector2(0.0, -1.0): DOWN() -> Vector2(0.0, 1.0): Vector3 Engine representation of a two dimensional vector. Properties x : float X coordinate. y : float Y coordinate. z : float Z coordinate. Signals None. Methods None. Rect2 Engine representation of a rectangle vector. Properties x : float X coordinate. y : float Y coordinate. w : float Rectangle's width. h : float Rectangle's height. Signals None. Methods None.","title":"Math"},{"location":"python_api/math/#seikamath","text":"","title":"seika.math"},{"location":"python_api/math/#math","text":"Generic math functions","title":"Math"},{"location":"python_api/math/#properties","text":"None.","title":"Properties"},{"location":"python_api/math/#signals","text":"None.","title":"Signals"},{"location":"python_api/math/#methods","text":"lerp(source: float, destination: float, amount: float) -> float: Linearly interpolate between two values.","title":"Methods"},{"location":"python_api/math/#vector2","text":"Engine representation of a two-dimensional vector.","title":"Vector2"},{"location":"python_api/math/#properties_1","text":"x : float X coordinate. y : float Y coordinate.","title":"Properties"},{"location":"python_api/math/#signals_1","text":"None.","title":"Signals"},{"location":"python_api/math/#methods_1","text":"dot_product(value: seika.math.Vector2) -> float: Returns the dot product of two Vector2 items. lerp(source: seika.math.Vector2, destination: seika.math.Vector2, amount: float) -> seika.math.Vector2: Returns the linearly interpolated value of two points. Static functions that return specific values ZERO() -> Vector2(0.0, 0.0): LEFT() -> Vector2(-1.0, 0.0): RIGHT() -> Vector2(0.0, 1.0): UP() -> Vector2(0.0, -1.0): DOWN() -> Vector2(0.0, 1.0):","title":"Methods"},{"location":"python_api/math/#vector3","text":"Engine representation of a two dimensional vector.","title":"Vector3"},{"location":"python_api/math/#properties_2","text":"x : float X coordinate. y : float Y coordinate. z : float Z coordinate.","title":"Properties"},{"location":"python_api/math/#signals_2","text":"None.","title":"Signals"},{"location":"python_api/math/#methods_2","text":"None.","title":"Methods"},{"location":"python_api/math/#rect2","text":"Engine representation of a rectangle vector.","title":"Rect2"},{"location":"python_api/math/#properties_3","text":"x : float X coordinate. y : float Y coordinate. w : float Rectangle's width. h : float Rectangle's height.","title":"Properties"},{"location":"python_api/math/#signals_3","text":"None.","title":"Signals"},{"location":"python_api/math/#methods_3","text":"None.","title":"Methods"},{"location":"python_api/network/","text":"seika.network Network Interface for network related operations for multiplayer. Properties None. Signals Server and Client signals. peer_connected Emitted once a peer is connected to the Server . peer_disconnected Emitted once a peer is disconnected from the Server . message_received Emitted once a message is received from the network. Client only signals. connected_to_server Emitted once a client successfully connects to a Server . connection_to_server_failed Emitted once a client fails to connect to a Server . Methods @staticmethod connect_signal(signal_id: str, listener_node: seika.node.Node, function_name: str) -> None: Connects to network related signal. Server Interface for server related operations for multiplayer. Properties None. Signals None. Methods @staticmethod start(port: int) -> None: Starts server on designated port . @staticmethod stop() -> None: Stops previously started server. @staticmethod send_message_to_all_clients(message: str) -> None: Sends message to all connected clients. Client Interface for client related operations for multiplayer. Properties None. Signals None. Methods @staticmethod connect(endpoint: str, port: int) -> None: Connects to a server with the passed in endpoint and port . @staticmethod disconnect() -> None: Disconnects from a server. @staticmethod send_message_to_server(message:str) -> None: Sends message to the server.","title":"Network"},{"location":"python_api/network/#seikanetwork","text":"","title":"seika.network"},{"location":"python_api/network/#network","text":"Interface for network related operations for multiplayer.","title":"Network"},{"location":"python_api/network/#properties","text":"None.","title":"Properties"},{"location":"python_api/network/#signals","text":"Server and Client signals. peer_connected Emitted once a peer is connected to the Server . peer_disconnected Emitted once a peer is disconnected from the Server . message_received Emitted once a message is received from the network. Client only signals. connected_to_server Emitted once a client successfully connects to a Server . connection_to_server_failed Emitted once a client fails to connect to a Server .","title":"Signals"},{"location":"python_api/network/#methods","text":"@staticmethod connect_signal(signal_id: str, listener_node: seika.node.Node, function_name: str) -> None: Connects to network related signal.","title":"Methods"},{"location":"python_api/network/#server","text":"Interface for server related operations for multiplayer.","title":"Server"},{"location":"python_api/network/#properties_1","text":"None.","title":"Properties"},{"location":"python_api/network/#signals_1","text":"None.","title":"Signals"},{"location":"python_api/network/#methods_1","text":"@staticmethod start(port: int) -> None: Starts server on designated port . @staticmethod stop() -> None: Stops previously started server. @staticmethod send_message_to_all_clients(message: str) -> None: Sends message to all connected clients.","title":"Methods"},{"location":"python_api/network/#client","text":"Interface for client related operations for multiplayer.","title":"Client"},{"location":"python_api/network/#properties_2","text":"None.","title":"Properties"},{"location":"python_api/network/#signals_2","text":"None.","title":"Signals"},{"location":"python_api/network/#methods_2","text":"@staticmethod connect(endpoint: str, port: int) -> None: Connects to a server with the passed in endpoint and port . @staticmethod disconnect() -> None: Disconnects from a server. @staticmethod send_message_to_server(message:str) -> None: Sends message to the server.","title":"Methods"},{"location":"python_api/node/","text":"seika.node Node Inherits : N/A. Class used as an interface for scene node functionality. Base class for all scene node types. Properties name : str Unique name of node once added to the scene. entity_id : int Unique id of entity. tags : List[str] List of tags that has been assigned to an entity. visibility : bool Visibility of a node. Also affects a node's children visibility. Signals None. Methods @classmethod new() -> seika.node.Node: Will create a new instance of either Node or any class that inherits it. Must be added to the scene tree from a node that exists within the scene with the add_child method. queue_deletion() -> None: Queues a node to be deleted and removed from a scene if it's currently added to the scene tree. add_child(node: Node) -> None: Adds a node as a child to the current node. get_node(name: str) -> seika.node.Node: Returns a node with the given name. Will be None if node is not found. get_parent() -> seika.node.Node: Returns the node's parent node. Will be None if node is root. get_children() -> list: Returns the node's children nodes. Won't return child's children. create_signal(signal_id: str) -> None: Creates a signal for subscribers to listen to. connect_signal(signal_id: str, listener_node: seika.node.Node, function_name: str) -> None: Connects source node's signal to listener node. emit_signal(signal_id: str, args=[]) -> None: Emits signal from source node. show() -> None: Makes a node visible. hide() -> None: Makes a node invisible. _start() -> None: Called when entity is loaded into scene tree with all dependencies and children. _physics_process(delta_time: float) -> None: Called every frame. delta_time is passed in to have a frame consistent with CPU speed. _end() -> None: Called before entity exits scene tree. Timer Inherits : Node Class used as an interface for Timer functionality. Must be added to scene tree in order to be used. Properties wait_time: float A timer's run time. For example, a wait_time of 3.5 is equivalent three and a half seconds. time_left: float How much time a timer has left to run. When time_left is zero, the timer is stopped. loops: bool If set to True the timer will start again after stopping. is_stopped: bool If True the timer is stopped. Signals timeout Emitted when a timer's time_left reached zero. Methods start(wait_time: Optional[float] = None) -> None: Will start a timer. Will update the wait_time property of a timer if the wait_time parameter is not None . stop() -> None: Will stop a timer. timeout signal will not be triggered. pause() -> None: Pauses a timer. Doesn't have an effect if paused already. resume() -> None: Resumes a paused timer. Node2D Inherits : Node Class used as an interface for scene 2D functionality. Base class for all 2D scene node types. Properties position: seika.math.Vector2 Current position of entity. rotation: float Current rotation in degrees of entity. Signals None. Methods get_position() -> seika.math.Vector2: Get node's current position. set_position(value: seika.math.Vector2) -> None: Set node's current position. add_to_position(value: seika.math.Vector2) -> None: Add to node's current position. For example, if this line of code is within the _process function, the output of this line of code node.add_to_position(Vector(5, 10)) within 3 frames will be [(5, 10), (10, 20), (15, 30)] . Sprite Inherits : Node2D -> Node Class used to render a sprite entity. Properties flip_h: bool Determines whether the x axis is flipped. flip_v: bool Determines whether the y axis is flipped. modulate: seika.color.Color Node's color modulation. texture: seika.assets.Texture Node's texture . draw_source: seika.math.Rect2 Node's draw source represented as a Rect2 . Will draw the loaded texture that's within the bounds of the Rect2 . Signals None. Methods None. AnimatedSprite Inherits : Node2D -> Node Class used to render an animated sprite entity. Properties is_playing: bool Returns True if an animation is currently playing. modulate: seika.color.Color Node's color modulation. frame: int Current frame of animation. animation_frames: int Amount of frames for current animation. animation_speed: int Speed of current animation in milliseconds per frame. flip_h: bool Detemines whether the x axis is flipped. flip_v: bool Detemines whether the y axis is flipped. Signals animation_finished Emitted when an animations is finished. frame_changed Emitted when an animation frame changes. Methods play(animation_name: str, start_frame = 0) -> None: Plays animation based on the name passed in. set_animation(animation_name: str) -> None: Sets the current animation based on the name passed in. stop() -> None: Stops the currently playing animation. TextLabel Inherits : Node2D -> Node Class used to render font. Properties text: str Text Label's text. color: seika.color.Color Color of the text. font: seika.assets.Font The font of the text. word_wrap: bool Determines if the textlabel has word wrapping enabled. max_characters_per_line: int How many characters per line a text label can display. Must have word_wrap set to True to take effect. new_line_padding: int Vertical padding for new lines. Must have word_wrap set to True to take effect. Signals None. Methods get_text() -> str: Get node's label text. set_text(value: str) -> None: Set node's label text. CollisionShape2D Inherits : Node2D -> Node Class used to define collision shapes defined as rectangles. May add other collision shapes in the future. Properties collider_rect: seika.math.Rect2 Collision shape's colliding rectangle. color: seika.color.Color A collider's color. Only shown when colliders_visible is enabled in project properties . is_under_mouse: bool Returns True if mouse cursor is on top of collider_rect . Signals None. Methods add_collision_exception(node: seika.node.Node) -> None: Adds a node to an exception list to ignore collisions. remove_collision_exception(node: seika.node.Node) -> None: Removes a node from an exception list. Collisions between nodes are enabled. Spatial Inherits : Node Base class for 3D entities. Properties position: seika.math.Vector3 Spatial's position represented as a Vector3 . Signals None. Methods add_to_position(value: seika.math.Vector3) -> None: Adds passed in value to the Spatial's position. TextureCube Inherits : Spatial -> Node Class that represents 3D cubes with textures. Properties None. Signals None. Methods None. DirectionalLight Inherits : Spatial -> Node Class representing a directional light. Properties direction: seika.math.Vector3 The direction that the light is pointing. Signals None. Methods None. PointLight Inherits : Spatial -> Node Class representing a directional light. Properties cutoff: float The cutoff for the light's inner cone. outer_cutoff: float The cutoff for the light's outer cone. Signals None. Methods None. SpotLight Inherits : Spatial -> Node Class representing a spotlight. Properties direction: seika.math.Vector3 The direction that the light is pointing. Signals None. Methods None.","title":"Node"},{"location":"python_api/node/#seikanode","text":"","title":"seika.node"},{"location":"python_api/node/#node","text":"Inherits : N/A. Class used as an interface for scene node functionality. Base class for all scene node types.","title":"Node"},{"location":"python_api/node/#properties","text":"name : str Unique name of node once added to the scene. entity_id : int Unique id of entity. tags : List[str] List of tags that has been assigned to an entity. visibility : bool Visibility of a node. Also affects a node's children visibility.","title":"Properties"},{"location":"python_api/node/#signals","text":"None.","title":"Signals"},{"location":"python_api/node/#methods","text":"@classmethod new() -> seika.node.Node: Will create a new instance of either Node or any class that inherits it. Must be added to the scene tree from a node that exists within the scene with the add_child method. queue_deletion() -> None: Queues a node to be deleted and removed from a scene if it's currently added to the scene tree. add_child(node: Node) -> None: Adds a node as a child to the current node. get_node(name: str) -> seika.node.Node: Returns a node with the given name. Will be None if node is not found. get_parent() -> seika.node.Node: Returns the node's parent node. Will be None if node is root. get_children() -> list: Returns the node's children nodes. Won't return child's children. create_signal(signal_id: str) -> None: Creates a signal for subscribers to listen to. connect_signal(signal_id: str, listener_node: seika.node.Node, function_name: str) -> None: Connects source node's signal to listener node. emit_signal(signal_id: str, args=[]) -> None: Emits signal from source node. show() -> None: Makes a node visible. hide() -> None: Makes a node invisible. _start() -> None: Called when entity is loaded into scene tree with all dependencies and children. _physics_process(delta_time: float) -> None: Called every frame. delta_time is passed in to have a frame consistent with CPU speed. _end() -> None: Called before entity exits scene tree.","title":"Methods"},{"location":"python_api/node/#timer","text":"Inherits : Node Class used as an interface for Timer functionality. Must be added to scene tree in order to be used.","title":"Timer"},{"location":"python_api/node/#properties_1","text":"wait_time: float A timer's run time. For example, a wait_time of 3.5 is equivalent three and a half seconds. time_left: float How much time a timer has left to run. When time_left is zero, the timer is stopped. loops: bool If set to True the timer will start again after stopping. is_stopped: bool If True the timer is stopped.","title":"Properties"},{"location":"python_api/node/#signals_1","text":"timeout Emitted when a timer's time_left reached zero.","title":"Signals"},{"location":"python_api/node/#methods_1","text":"start(wait_time: Optional[float] = None) -> None: Will start a timer. Will update the wait_time property of a timer if the wait_time parameter is not None . stop() -> None: Will stop a timer. timeout signal will not be triggered. pause() -> None: Pauses a timer. Doesn't have an effect if paused already. resume() -> None: Resumes a paused timer.","title":"Methods"},{"location":"python_api/node/#node2d","text":"Inherits : Node Class used as an interface for scene 2D functionality. Base class for all 2D scene node types.","title":"Node2D"},{"location":"python_api/node/#properties_2","text":"position: seika.math.Vector2 Current position of entity. rotation: float Current rotation in degrees of entity.","title":"Properties"},{"location":"python_api/node/#signals_2","text":"None.","title":"Signals"},{"location":"python_api/node/#methods_2","text":"get_position() -> seika.math.Vector2: Get node's current position. set_position(value: seika.math.Vector2) -> None: Set node's current position. add_to_position(value: seika.math.Vector2) -> None: Add to node's current position. For example, if this line of code is within the _process function, the output of this line of code node.add_to_position(Vector(5, 10)) within 3 frames will be [(5, 10), (10, 20), (15, 30)] .","title":"Methods"},{"location":"python_api/node/#sprite","text":"Inherits : Node2D -> Node Class used to render a sprite entity.","title":"Sprite"},{"location":"python_api/node/#properties_3","text":"flip_h: bool Determines whether the x axis is flipped. flip_v: bool Determines whether the y axis is flipped. modulate: seika.color.Color Node's color modulation. texture: seika.assets.Texture Node's texture . draw_source: seika.math.Rect2 Node's draw source represented as a Rect2 . Will draw the loaded texture that's within the bounds of the Rect2 .","title":"Properties"},{"location":"python_api/node/#signals_3","text":"None.","title":"Signals"},{"location":"python_api/node/#methods_3","text":"None.","title":"Methods"},{"location":"python_api/node/#animatedsprite","text":"Inherits : Node2D -> Node Class used to render an animated sprite entity.","title":"AnimatedSprite"},{"location":"python_api/node/#properties_4","text":"is_playing: bool Returns True if an animation is currently playing. modulate: seika.color.Color Node's color modulation. frame: int Current frame of animation. animation_frames: int Amount of frames for current animation. animation_speed: int Speed of current animation in milliseconds per frame. flip_h: bool Detemines whether the x axis is flipped. flip_v: bool Detemines whether the y axis is flipped.","title":"Properties"},{"location":"python_api/node/#signals_4","text":"animation_finished Emitted when an animations is finished. frame_changed Emitted when an animation frame changes.","title":"Signals"},{"location":"python_api/node/#methods_4","text":"play(animation_name: str, start_frame = 0) -> None: Plays animation based on the name passed in. set_animation(animation_name: str) -> None: Sets the current animation based on the name passed in. stop() -> None: Stops the currently playing animation.","title":"Methods"},{"location":"python_api/node/#textlabel","text":"Inherits : Node2D -> Node Class used to render font.","title":"TextLabel"},{"location":"python_api/node/#properties_5","text":"text: str Text Label's text. color: seika.color.Color Color of the text. font: seika.assets.Font The font of the text. word_wrap: bool Determines if the textlabel has word wrapping enabled. max_characters_per_line: int How many characters per line a text label can display. Must have word_wrap set to True to take effect. new_line_padding: int Vertical padding for new lines. Must have word_wrap set to True to take effect.","title":"Properties"},{"location":"python_api/node/#signals_5","text":"None.","title":"Signals"},{"location":"python_api/node/#methods_5","text":"get_text() -> str: Get node's label text. set_text(value: str) -> None: Set node's label text.","title":"Methods"},{"location":"python_api/node/#collisionshape2d","text":"Inherits : Node2D -> Node Class used to define collision shapes defined as rectangles. May add other collision shapes in the future.","title":"CollisionShape2D"},{"location":"python_api/node/#properties_6","text":"collider_rect: seika.math.Rect2 Collision shape's colliding rectangle. color: seika.color.Color A collider's color. Only shown when colliders_visible is enabled in project properties . is_under_mouse: bool Returns True if mouse cursor is on top of collider_rect .","title":"Properties"},{"location":"python_api/node/#signals_6","text":"None.","title":"Signals"},{"location":"python_api/node/#methods_6","text":"add_collision_exception(node: seika.node.Node) -> None: Adds a node to an exception list to ignore collisions. remove_collision_exception(node: seika.node.Node) -> None: Removes a node from an exception list. Collisions between nodes are enabled.","title":"Methods"},{"location":"python_api/node/#spatial","text":"Inherits : Node Base class for 3D entities.","title":"Spatial"},{"location":"python_api/node/#properties_7","text":"position: seika.math.Vector3 Spatial's position represented as a Vector3 .","title":"Properties"},{"location":"python_api/node/#signals_7","text":"None.","title":"Signals"},{"location":"python_api/node/#methods_7","text":"add_to_position(value: seika.math.Vector3) -> None: Adds passed in value to the Spatial's position.","title":"Methods"},{"location":"python_api/node/#texturecube","text":"Inherits : Spatial -> Node Class that represents 3D cubes with textures.","title":"TextureCube"},{"location":"python_api/node/#properties_8","text":"None.","title":"Properties"},{"location":"python_api/node/#signals_8","text":"None.","title":"Signals"},{"location":"python_api/node/#methods_8","text":"None.","title":"Methods"},{"location":"python_api/node/#directionallight","text":"Inherits : Spatial -> Node Class representing a directional light.","title":"DirectionalLight"},{"location":"python_api/node/#properties_9","text":"direction: seika.math.Vector3 The direction that the light is pointing.","title":"Properties"},{"location":"python_api/node/#signals_9","text":"None.","title":"Signals"},{"location":"python_api/node/#methods_9","text":"None.","title":"Methods"},{"location":"python_api/node/#pointlight","text":"Inherits : Spatial -> Node Class representing a directional light.","title":"PointLight"},{"location":"python_api/node/#properties_10","text":"cutoff: float The cutoff for the light's inner cone. outer_cutoff: float The cutoff for the light's outer cone.","title":"Properties"},{"location":"python_api/node/#signals_10","text":"None.","title":"Signals"},{"location":"python_api/node/#methods_10","text":"None.","title":"Methods"},{"location":"python_api/node/#spotlight","text":"Inherits : Spatial -> Node Class representing a spotlight.","title":"SpotLight"},{"location":"python_api/node/#properties_11","text":"direction: seika.math.Vector3 The direction that the light is pointing.","title":"Properties"},{"location":"python_api/node/#signals_11","text":"None.","title":"Signals"},{"location":"python_api/node/#methods_11","text":"None.","title":"Methods"},{"location":"python_api/physics/","text":"seika.physics Collision Interface for collisions between entities. Properties None. Signals None. Methods @staticmethod get_collided_nodes(node: seika.node.Node) -> list: Returns a list of nodes that collided with the passed in node . @staticmethod get_nodes_under_mouse() -> list: Returns a list of nodes ( CollisionShape2D ) that are under the current mouse's position.","title":"Physics"},{"location":"python_api/physics/#seikaphysics","text":"","title":"seika.physics"},{"location":"python_api/physics/#collision","text":"Interface for collisions between entities.","title":"Collision"},{"location":"python_api/physics/#properties","text":"None.","title":"Properties"},{"location":"python_api/physics/#signals","text":"None.","title":"Signals"},{"location":"python_api/physics/#methods","text":"@staticmethod get_collided_nodes(node: seika.node.Node) -> list: Returns a list of nodes that collided with the passed in node . @staticmethod get_nodes_under_mouse() -> list: Returns a list of nodes ( CollisionShape2D ) that are under the current mouse's position.","title":"Methods"},{"location":"python_api/renderer/","text":"seika.renderer Renderer Interface for the engine's renderer. Properties None. Signals None. Methods @staticmethod draw_texture(texture_path: str, source_rect: seika.math.Rect2, dest_rect: seika.math.Rect2, z_index=0, rotation=0.0, color=seika.color.Color(1.0, 1.0, 1.0, 1.0), flip_x=False, flip_y=False) -> None: Draws a texture from a relative path. Texture must have already been loaded by engine to draw.","title":"Renderer"},{"location":"python_api/renderer/#seikarenderer","text":"","title":"seika.renderer"},{"location":"python_api/renderer/#renderer","text":"Interface for the engine's renderer.","title":"Renderer"},{"location":"python_api/renderer/#properties","text":"None.","title":"Properties"},{"location":"python_api/renderer/#signals","text":"None.","title":"Signals"},{"location":"python_api/renderer/#methods","text":"@staticmethod draw_texture(texture_path: str, source_rect: seika.math.Rect2, dest_rect: seika.math.Rect2, z_index=0, rotation=0.0, color=seika.color.Color(1.0, 1.0, 1.0, 1.0), flip_x=False, flip_y=False) -> None: Draws a texture from a relative path. Texture must have already been loaded by engine to draw.","title":"Methods"},{"location":"python_api/scene/","text":"seika.scene Scene Tree Represents the scene tree which handles operations related to the scene system. Properties None. Signals None. Methods change_scene(scene_path: str) -> None: Change the scene to the current scene defined by scene_path . get_current_scene_node() -> seika.node.Node: Returns the root node of the current scene.","title":"Scene"},{"location":"python_api/scene/#seikascene","text":"","title":"seika.scene"},{"location":"python_api/scene/#scene-tree","text":"Represents the scene tree which handles operations related to the scene system.","title":"Scene Tree"},{"location":"python_api/scene/#properties","text":"None.","title":"Properties"},{"location":"python_api/scene/#signals","text":"None.","title":"Signals"},{"location":"python_api/scene/#methods","text":"change_scene(scene_path: str) -> None: Change the scene to the current scene defined by scene_path . get_current_scene_node() -> seika.node.Node: Returns the root node of the current scene.","title":"Methods"},{"location":"showcase/projects_made_with_seika/","text":"Projects Made With Seika Cave Salamander About A game made for uniday-jam-2021 a 72 hour game jam. Links itch.io/cave-salamander Screenshots 3D Demo About A project used to build and test out 3D features. Links Project Source Screenshots","title":"Projects Made With Seika"},{"location":"showcase/projects_made_with_seika/#projects-made-with-seika","text":"","title":"Projects Made With Seika"},{"location":"showcase/projects_made_with_seika/#cave-salamander","text":"","title":"Cave Salamander"},{"location":"showcase/projects_made_with_seika/#about","text":"A game made for uniday-jam-2021 a 72 hour game jam.","title":"About"},{"location":"showcase/projects_made_with_seika/#links","text":"itch.io/cave-salamander","title":"Links"},{"location":"showcase/projects_made_with_seika/#screenshots","text":"","title":"Screenshots"},{"location":"showcase/projects_made_with_seika/#3d-demo","text":"","title":"3D Demo"},{"location":"showcase/projects_made_with_seika/#about_1","text":"A project used to build and test out 3D features.","title":"About"},{"location":"showcase/projects_made_with_seika/#links_1","text":"Project Source","title":"Links"},{"location":"showcase/projects_made_with_seika/#screenshots_1","text":"","title":"Screenshots"}]}